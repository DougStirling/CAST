startExercise("exerciseProbProg.CardDiceTableApplet", 500, 600);

addVariation("cards", "One card is randomly selected from a standard pack of 52 playing cards.\\nWhat is the probability of picking a #?:string[cardSuit](red card*red card*black card*black card*club*heart*diamond*spade*card*card*card*card)# whose value is", "qnType(0)#cardSuit(0:11)", "#cardQnType(0)# a jack, queen or king (J, Q or K)?|||#cardQnType(1)# a jack, queen, king or ace (J, Q, K or A)?|||#cardQnType(2)# a king or ace (K or A)?|||#cardQnType(3)# #cardEquals[](A*2*3*4*5*6*7*8*9*10*J*Q*K)#?|||#cardQnType(4)# #cardEquals[](A*2*3*4*5*6*7*8*9*10*J*Q*K)# or #cardInequality[](higher*lower)#?\\n(Treat aces as having #cardAceType[](higher*lower)# value than other cards.)", 0);
addVariation("dice", "Two 6-sided dice are rolled.\\nWhat is the probability", "qnType(1)", "#dieQnType(0)# that the total is #dieInequality[](at least*less than or equal to*equal to)# #diceTotal(3:10)#?|||#dieQnType(1)# that at least one is a #dieEquals(1:6)#?|||#dieQnType(2)# that at least one of the dice is more than #dieEquals(1:5)#?|||#dieQnType(3)# that both dice are the same?", 0);

//----------------------------------------------

startExercise("exerciseCategProg.FindProbFromBarsApplet", 480, 670);

addVariation("girlWeights", "Two hundred girls in a high school were classified according to their weights. The bar chart below shows the data#?:string[index](.* for the children whose academic performance at school was rated as 'poor'.* for the children whose academic performance at school was rated as 'satisfactory'.* for the children whose academic performance at school was rated as 'above average'.)#\\nIf one of these #?:string[index](200*31*150*19)# children is randomly selected, what is the probability that her weight is #successes(:)#", "index(0:3)#nSuccessCats(1:3)#varName(weight)#itemsName(girls)#categories(Underweight Normal Overweight Obese)#ordinal(true)#counts[index](25 110 40 25*4 16 7 4*18 84 30 18*3 10 4 2)#countAxis[index](0 125 0 20*0 18 0 2*0 95 0 20*0 12 0 2)", null, 0);
addVariation("crashDays", "The bar chart below shows the day of the week in which all #?:string[index](daytime*evening*nighttime)# fatal road crashes (#?:string[index](6am to 6pm*6pm to 10pm*10pm to 6am)#) occured in New Zealand between 2004 and 2006.\\nIf one of these #?:string[index](89*62*158)# fatal crashes is randomly selected, what is the probability that it was on #successes(:)#", "index(0:2)#nSuccessCats(1:3)#varName(day of the week)#itemsName(crashes)#categories(Mon Tues Wed Thurs Fri Sat Sun)#ordinal(true)#counts[index](9 9 5 16 12 22 16*6 8 11 9 8 11 9*7 5 16 26 44 56 4)#countAxis[index](0 25 0 5*0 13 0 2*0 62 0 10)", null, 0);
addVariation("crashTypes", "The bar chart below shows the types of people killed on New Zealand roads in 2007.\\nIf one of these 321 fatalities is randomly selected, what is the probability that the type of person is #successes(:)#", "nSuccessCats(1:3)#varName(type of person killed)#itemsName(fatalities)#categories(Driver Passenger Motorbike_rider Motorbike_pillion Pedestrian Bicyclist Other)#ordinal(false)#counts(157 92 25 1 35 9 2)#countAxis(0 170 0 50)", null, 0);
addVariation("births", "The following bar chart shows the types of delivery for all births in the maternity ward of a hospital during one year.\\nIf one of these #?:string[index](416*484*393)# births is randomly selected from hospital records, what is the probability that the delivery method was #successes(:)#", "index(0:2)#nSuccessCats(1:3)#varName(delivery type)#itemsName(mothers)#categories(Spontaneous Forceps Ventouse/Breech Caesarean)#ordinal(false)#counts[index](265 48 2 101*283 56 9 136*221 73 14 85)#countAxis[index](0 290 0 50*0 310 0 50*0 245 0 50)", null, 0);

//----------------------------------------------

startExercise("exerciseNumGraphProg.HistoAreaProbApplet", 550, 550);

addVariation("appleWeights", "The weights of the individual apples in a crate of #count[](50,100)# are summarised in the histogram below. If a single apple is selected at random from the crate, what is the probability that its weight is #cut-offs(:)# grams?", "shape[](2,8,-2)#axis(240 360 240 20)#classInfo(240 10)#intervalType(0:3)#varName(Weight, gm)", null, 0);
addVariation("birthWeight", "The histogram below describes the birth weights of #count(40:80)# full-term babies born in a hospital in a 3-month period. One of these babies is randomly selected from the hospital records; what is the probability that its weight is #cut-offs(:)# kg?", "shape[](2,8,-2)#axis(2.0 4.5001 2.0 0.2)#classInfo(2.0 0.2)#intervalType(0:3)#varName(Birth weight, kg)", null, 0);

//----------------------------------------------

startExercise("exerciseNormalProg.ContinProbApplet", 500, 600);

addVariation("cholesterol", "High blood cholesterol levels increase the risk of heart disease. Cholesterol level (measured in mmol/L) in some population of adult males has the following distribution.\\nWhat is the probability that a random person's cholesterol level will be #cut-offs(-2.5:2.5:1)#mmol/L?", "index(0:1)#intervalType(0:2)#mean[index](4.3,5.7)#sd[](.4,.6)#mean2[index](5.7,4.3)#sd2[](.4,.6)#p1(0.3:0.7)#varName(cholesterol level)#maxValue(99.999)#axis(2.5 7.5 3 1)", null, 0);
addVariation("insectWeight", "The weight (gm) of a species of insect has the distribution shown below.\\nWhat is the probability that one insect has weight #cut-offs(-2.5:2.5:1)# grams?", "index(0:1)#intervalType(0:2)#mean[index](16,20)#sd[](1,1.5)#mean2[index](20,16)#sd2[](1,1.5)#p1(0.3:0.7)#varName(insect weight)#maxValue(99.999)#axis(11 25 12 2)", null, 0);

//----------------------------------------------

startExercise("exerciseProbProg.SumDiffTableApplet", 500, 650);

addVariation("cards", "Two cards are selected at random #replacement[](with*without)# replacement from a pack of #?:string[index](3*4*5)# cards numbered #?:string[index](1, 2 and 3*1, 2, 3 and 4*1, 2, 3, 4 and 5)#.", "index(0:2)#cardNames(Card_1 Card_2)#cardValues[index](1 2 3*1 2 3 4*1 2 3 4 5)#directionIndex(0:4)#directionNames(greater_than greater_than_or_equal_to less_than less_than_or_equal_to equal_to)", "sumDiffType(0)# What is the probability that the total of the two card values is #directionNames[directionIndex]# #cutoff[index](4,6,8)#?\\n(The table below shows this total for all possible combinations of two cards.)|||sumDiffType(1)# What is the probability that the difference between the card values (Card 1 minus Card 2) is #directionNames[directionIndex]# #cutoff[index](1,2,3)#?\\n(The table below shows this difference for all possible combinations of two cards.)|||sumDiffType(2)# What is the probability that the absolute difference between the card values is #directionNames[directionIndex]# #cutoff[index](1,2,3)#?\\n(The table below shows this difference for all possible combinations of two cards.)", 0);
addVariation("studentAges", "Consider a group of students aged #?:string[index](18, 19, 22 and 23*17, 18, 18, 20 and 22*17, 19, 20, 22, 23 and 27)#. Two of these students are selected at random #replacement[](with*without)# replacement.", "index(0:2)#cardNames(1st_student_age 2nd_student_age)#cardValues[index](18 19 22 23*17 18 18 20 22*17 19 20 22 23 27)#directionIndex(0:4)#directionNames(more_than at_least less_than less_than_or_equal_to exactly)", "sumDiffType(0)# What is the probability that the total age of the two selected students is #directionNames[directionIndex]# #cutoff(38:41)#?\\n(The table below shows total age for all possible pairs of students.)|||sumDiffType(1)# What is the probability that the first student selected is #directionNames[directionIndex]# #cutoff(1)# year older than the second student selected?#\\n(The table below shows the difference between the first and second ages for all pairs of students.)|||sumDiffType(2)# What is the probability that the two students are #directionNames[directionIndex]# #cutoff(2)# years different in age?\\n(The table below shows the absolute difference between the ages of all pairs of students.)", 0);
addVariation("raffle", "A club raffle is conducted by picking winners at random from member attending the club AGM. Each winner picks and keeps one of #?:string[index](3*4*5*6)# envelopes from a box containing #?:string[index]($10, $20 and $30*$10, $15, $20 and $30*$10, $15, $20, $25 and $30*$10, $15, $20, $25, $30 and $50)#.\\n", "index(0:3)#replacement(without)#cardNames(First_winner Second_winner)#cardValues[index](10 20 30*10 15 20 30*10 15 20 25 30*10 15 20 25 30 50)#directionIndex(0:4)#directionNames(over at_least under less_than_or_equal_to exactly)", "sumDiffType(0)#What is the probability that the total winnings of the first two prize winners is #directionNames[directionIndex]# $#cutoff[index](40,45,50,40)#?\\n(The table shows the total for all pairs of envelopes.)|||sumDiffType(1)#What is the probability that the first winner gets #directionNames[directionIndex]# $#cutoff[index](10,15,10,20)# more than the second winner?\\n(The table shows the differences for all first and second envelopes.)|||sumDiffType(2)#What is the probability that the two prizes are #directionNames[directionIndex]# $#cutoff(15)# different in value?\\n(The table below shows the absolute difference for all pairs of envelopes.)", 0);

//----------------------------------------------

